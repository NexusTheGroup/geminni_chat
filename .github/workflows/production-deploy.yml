name: Production Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  security-events: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  KUBE_CONTEXT: production-cluster
  ARGOCD_APP: nexusknowledge-production

jobs:
  quality-gates:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test -- --coverage

      - name: Security scan
        uses: aquasecurity/trivy-action@v0.33.1
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload security results
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      - name: Performance testing
        run: npm run test:performance

      - name: Build application
        run: npm run build

  build-and-push:
    needs: quality-gates
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: ${{ github.event_name == 'push' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: staging
    if: github.event_name == 'push'
    steps:
      - name: Deploy to staging
        uses: argoproj/actions/github-application-sync@v1
        with:
          application: nexusknowledge-staging
          github-token: ${{ secrets.GITHUB_TOKEN }}

  production-deployment:
    needs: deploy-to-staging
    runs-on: ubuntu-latest
    environment: production
    if: github.event_name == 'push'
    steps:
      - name: Trigger ArgoCD sync
        uses: argoproj/actions/github-application-sync@v1
        with:
          application: ${{ env.ARGOCD_APP }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for deployment
        run: |
          ./scripts/wait-for-deployment.sh production

      - name: Run validation tests
        run: |
          ./scripts/run-validation-tests.sh

  rollback-monitoring:
    needs: production-deployment
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'push'
    steps:
      - name: Monitor deployment health
        run: |
          ./scripts/monitor-deployment.sh
